#!/usr/bin/env python
import argparse
import numpy as np
import os

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data
from skimage import color

import cs663_project.common as common
from cs663_project.utils import now, DiscoConfig
from cs663_project.model import DiscoGAN
from cs663_project.loader import Loader
from cs663_project.data_tools import get_data, randomize_image



def build_config(args):
    batch1, batch2, channels, imdim = get_data(args.data)

    if args.model_out is None:
        model_out = "{}/{}/".format(common.MODEL_FOLDER, args.data)

    # Note: could make this truly optional (e.g., don't do decay if not here)
    decay = args.decay if (args.decay != 0.0) else args.learning_rate / 100.

    # TODO fill in number of classes
    disco_config = DiscoConfig(
        num_classes = None,
        image_size = imdim,
        channels = channels,
        batch_size = args.batch_size,
        num_iters = args.num_iters,
        learning_rate = args.learning_rate,
        attn = args.attention,
        decay = decay,
        wasserstein = args.wasserstein,
        model_out = model_out,
        save_iter = args.save_interval
    )

    return batch1, batch2, disco_config


def train(batch1, batch2, dconfig):
    load1 = Loader(batch1, shuffle=True)
    load2 = Loader(batch2, shuffle=True)

    # Build DiscoGAN with supplied parameters
    discogan = DiscoGAN(
        dim_b1 = dconfig.image_size,
        dim_b2 = dconfig.image_size,
        channels = dconfig.channels,
        learning_rate = dconfig.learning_rate,
        attn=dconfig.attn)

    if not os.path.exists(dconfig.model_out):
        os.makedirs(dconfig.model_out)

    plt.ioff();
    fig = plt.figure(figsize=(6, 12))
    np.set_printoptions(precision=3)

    for i in range(1, dconfig.num_iters + 1):
        if i % 10 == 0:
            print("Iter {} ({})".format(i, now()))

        xb1 = load1.next_batch(dconfig.batch_size)
        xb2 = load2.next_batch(dconfig.batch_size)

        xb1 = np.stack([randomize_image(
            img.reshape((dconfig.image_size, dconfig.image_size, dconfig.channels)),
            enlarge_size=int(1.2 * dconfig.image_size), output_size=dconfig.image_size) for img in xb1], 0)
        xb2 = np.stack([randomize_image(
            img.reshape((dconfig.image_size, dconfig.image_size, dconfig.channels)),
            enlarge_size=int(1.2 * dconfig.image_size), output_size=dconfig.image_size) for img in xb2], 0)

        discogan.train(xb1, xb2)

        if i >= 100000 and i % 1000 == 0:
            discogan.learning_rate -= dconfig.decay
            print("Lowered learning rate to {:.5f}".format(discogan.learning_rate))

        if i and i % 500 == 0:
            testb1 = load1.next_batch(10)
            testb2 = load2.next_batch(10)
            print(discogan.get_loss_names())
            lstring = discogan.get_loss(xb1, xb2)
            print("{} ({}): {}".format(i, now(), lstring))

            xb1_reconstructed = discogan.get_layer(testb1, testb2, 'xb1_reconstructed')
            Gb1 = discogan.get_layer(testb1, testb2, 'Gb1')
            xb2_reconstructed = discogan.get_layer(testb1, testb2, 'xb2_reconstructed')
            Gb2 = discogan.get_layer(testb1, testb2, 'Gb2')
            if dconfig.attn:
                attb1 = discogan.get_layer(testb1, testb2, 'attnb1')
                attb2 = discogan.get_layer(testb1, testb2, 'attnb2')

            testb1 = (testb1 + 1) / 2
            testb2 = (testb2 + 1) / 2
            xb1_reconstructed = (xb1_reconstructed + 1) / 2
            Gb1 = (Gb1 + 1) / 2
            xb2_reconstructed = (xb2_reconstructed + 1) / 2
            Gb2 = (Gb2 + 1) / 2

            print(Gb1.min(), Gb1.max(), xb1_reconstructed.min(), xb1_reconstructed.max())

            fig.clf()
            fig.subplots_adjust(.01, .01, .99, .99, .01, .01)
            for ii in range(10):
                if dconfig.attn:
                    ax1 = fig.add_subplot(10, 4, 4 * ii + 1)
                    ax2 = fig.add_subplot(10, 4, 4 * ii + 2)
                    ax3 = fig.add_subplot(10, 4, 4 * ii + 3)
                    ax4 = fig.add_subplot(10, 4, 4 * ii + 4)
                    for ax in (ax1, ax2, ax3, ax4):
                        ax.set_xticks([])
                        ax.set_yticks([])
                else:
                    ax1 = fig.add_subplot(10, 3, 3 * ii + 1)
                    ax2 = fig.add_subplot(10, 3, 3 * ii + 2)
                    ax3 = fig.add_subplot(10, 3, 3 * ii + 3)
                    for ax in (ax1, ax2, ax3):
                        ax.set_xticks([])
                        ax.set_yticks([])
                if dconfig.channels == 1:
                    ax1.imshow(testb1[ii].reshape((dconfig.image_size, dconfig.image_size)), cmap='gray', vmin=0, vmax=1)
                    ax2.imshow(Gb2[ii].reshape((dconfig.image_size, dconfig.image_size)), cmap='gray', vmin=0, vmax=1)
                    ax3.imshow(xb1_reconstructed[ii].reshape((dconfig.image_size, dconfig.image_size)), cmap='gray', vmin=0, vmax=1)
                else:
                    ax1.imshow(testb1[ii].reshape((dconfig.image_size, dconfig.image_size, dconfig.channels)))
                    ax2.imshow(Gb2[ii].reshape((dconfig.image_size, dconfig.image_size, dconfig.channels)))
                    ax3.imshow(xb1_reconstructed[ii].reshape((dconfig.image_size, dconfig.image_size, dconfig.channels)))
                    if dconfig.attn:
                        x = attb1[ii]
                        x = x.reshape((dconfig.image_size,dconfig.image_size,3)); x = x.sum(axis=2)
                        img_hsv = color.rgb2hsv(testb1[ii].reshape((dconfig.image_size, dconfig.image_size, dconfig.channels)))
                        x = x - x.min(); x = x / x.max();
                        img_hsv[:,:,2] *= x
                        img_masked = color.hsv2rgb(img_hsv)
                        ax4.imshow(img_masked)
            fig.canvas.draw()
            fig.savefig('b1_to_b2_{}.png'.format(data), dpi=500)


            fig.clf()
            fig.subplots_adjust(.01, .01, .99, .99, .01, .01)
            for ii in range(10):
                if dconfig.attn:
                    ax1 = fig.add_subplot(10, 4, 4 * ii + 1)
                    ax2 = fig.add_subplot(10, 4, 4 * ii + 2)
                    ax3 = fig.add_subplot(10, 4, 4 * ii + 3)
                    ax4 = fig.add_subplot(10, 4, 4 * ii + 4)
                    for ax in (ax1, ax2, ax3, ax4):
                        ax.set_xticks([])
                        ax.set_yticks([])
                else:
                    ax1 = fig.add_subplot(10, 3, 3 * ii + 1)
                    ax2 = fig.add_subplot(10, 3, 3 * ii + 2)
                    ax3 = fig.add_subplot(10, 3, 3 * ii + 3)
                    for ax in (ax1, ax2, ax3):
                        ax.set_xticks([])
                        ax.set_yticks([])
                if dconfig.channels == 1:
                    ax1.imshow(testb2[ii].reshape((dconfig.image_size, dconfig.image_size)), cmap='gray', vmin=0, vmax=1)
                    ax2.imshow(Gb1[ii].reshape((dconfig.image_size, dconfig.image_size)), cmap='gray', vmin=0, vmax=1)
                    ax3.imshow(xb2_reconstructed[ii].reshape((dconfig.image_size, dconfig.image_size)), cmap='gray', vmin=0, vmax=1)
                else:
                    ax1.imshow(testb2[ii].reshape((dconfig.image_size, dconfig.image_size, dconfig.channels)))
                    ax2.imshow(Gb1[ii].reshape((dconfig.image_size, dconfig.image_size, dconfig.channels)))
                    ax3.imshow(xb2_reconstructed[ii].reshape((dconfig.image_size, dconfig.image_size, dconfig.channels)))
                    if dconfig.attn:
                        x = attb2[ii]
                        x = x.reshape((dconfig.image_size,dconfig.image_size,3)); x = x.sum(axis=2)
                        img_hsv = color.rgb2hsv(testb2[ii].reshape((dconfig.image_size, dconfig.image_size, dconfig.channels)))
                        x = x - x.min(); x = x / x.max();
                        img_hsv[:,:,2] *= x
                        img_masked = color.hsv2rgb(img_hsv)
                        ax4.imshow(img_masked)
            fig.canvas.draw()
            fig.savefig('b2_to_b1_{}.png'.format(data), dpi=500)

        if i % dconfig.save_iter == 0:
            print('Saved.')
            discogan.save(folder=dconfig.model_out)

    # TODO should check with matt if there was any important logic to the way things
    # were saved before
    print('Saved.')
    discogan.save(folder=dconfig.model_out)


def main():
    # Get command line arguments
    parser = argparse.ArgumentParser()
    # Only required argument is data (what dataset are we training on)
    parser.add_argument(
        "data",
        help="Specify the dataset to train on. Can be one of 'cifar', 'monet', 'zebra', or 'coil'")
    # Optional arguments
    parser.add_argument(
        '-b', "--batch_size", type=int, default=10,
        help="Batch size for training iterations.")
    parser.add_argument(
        '-i', "--num_iters", type=int, default=200000,
        help="Number of iterations of training to perform.")
    parser.add_argument(
        '-l', "--learning_rate", type=float, default=0.002,
        help="Learning rate for gradient descent.")
    parser.add_argument(
        '-a', "--attention", type=bool, default=False,
        help="Enables the attention mechanism.")
    parser.add_argument(
        '-w', "--wasserstein", type=bool, default=False,
        help="Enables Wasserstein loss.")
    parser.add_argument(
        '-d', "--decay", type=float, default=0.0,
        help="Specifies decay for the learning rate."
    )
    parser.add_argument(
        '-o', "--model_out", type=str, default=None,
        help="Specify the save folder for the output model."
    )
    parser.add_argument(
        '-s', "--save_interval", type=int, default=100,
        help="Save the model every x iterations.")
    args = parser.parse_args()

    batch1, batch2, dconfig = build_config(args)
    train(batch1, batch2, dconfig)


if __name__ == '__main__':
    main()
